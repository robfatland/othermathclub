{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Probability"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### The Monty Hall Game Show Puzzle\n",
    "\n",
    "You are a contestant on a game show. The host (Monty Hall) shows you three boxes, only one of which has a prize hidden inside. You are allowed to choose one of the boxes. Before its contents are revealed Monty Hall first opens a different box under which (he knows) there is no prize. Now there are two un-revealed boxes: The one you chose and\n",
    "the other un-revealed box. \n",
    "\n",
    "Monty now offers you the opportunity to switch your choice to the other box. What should you do? That is: What is your best strategy assuming you want to win the prize? \n",
    "\n",
    "Emily solved this.\n",
    "\n",
    "#### Emily's Solution\n",
    "\n",
    "Emily states that you should switch boxes and her reasoning is quite elegant. \n",
    "I will try and reproduce it as\n",
    "follows: \n",
    "\n",
    "Your probability of choosing correctly at the start is clearly 1 in 3. Think of two swimming pools of size 1/3 \n",
    "and size 2/3. You are now sitting in the swimming pool of size 1/3 and the other two boxes are in the other larger\n",
    "swimming pool. We can agree that the numbers 1/3 and 2/3 represent the probabilities that the actual prize is in the\n",
    "two respective pools.\n",
    "\n",
    "Now (after one of the empty boxes is revealed) you have the opportunity to jump into the larger swimming \n",
    "pool, the one with a probability of 2/3. You do so... and now here is where it gets interesting. If after you \n",
    "jumped into the bigger pool you had to choose between the two boxes in that pool you would have even chances \n",
    "of selecting the correct box, the one with the prize. \n",
    "\n",
    "But Monty Hall has conveniently eliminated the wrong choice. You can't possibly make a mistake when you jump \n",
    "into the larger pool and therefore your chances of winning the prize using Emily's strategy will double \n",
    "to 2/3. $\\boxdot$\n",
    "\n",
    "You can use the program below to verify Emily's strategy. It plays the game using the \"stay put\" \n",
    "rule many times. Then it starts over using the \"change\" rule, again many times. Then it prints out the results.\n",
    "\n",
    "At the top of the program is a constant called 'number_of_games' that you can set to anything you like. \n",
    "This changes how many test games are played for each strategy. You can make it as big as you like, even \n",
    "up to a million games. It should not take long to run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "################\n",
    "##\n",
    "## Make this number bigger to play more games; see how it affects your results\n",
    "##\n",
    "number_of_games = 7\n",
    "##\n",
    "################\n",
    "\n",
    "import random as r\n",
    "\n",
    "# Stay put (do not switch boxes)\n",
    "number_of_wins = 0\n",
    "prize_locations = [0, 0, 0, 0]\n",
    "for game in range(number_of_games):\n",
    "    prize = r.randint(1,3)\n",
    "    prize_locations[prize] += 1\n",
    "    choice = r.randint(1, 3)\n",
    "    # Since the reveal does not change my choice I will skip that\n",
    "    if choice == prize: number_of_wins += 1\n",
    "\n",
    "print ' '\n",
    "print '(Trying the first strategy now: Stay with your first choice...) '\n",
    "print ' '\n",
    "print 'STAY with your first choice strategy'\n",
    "print 'After', number_of_games, 'games:'\n",
    "print '    the winning percentage was', float(number_of_wins)/float(number_of_games)\n",
    "# print '    (the prize locations were', prize_locations[1], prize_locations[2], prize_locations[3], ')'\n",
    "print ' '\n",
    "print '(Trying the other strategy now...)'\n",
    "print ' '\n",
    "\n",
    "# Switch boxes strategy\n",
    "number_of_wins = 0\n",
    "prize_locations = [0, 0, 0, 0]\n",
    "for game in range(number_of_games):\n",
    "    prize = r.randint(1,3)\n",
    "    prize_locations[prize] += 1\n",
    "    choice = r.randint(1, 3)\n",
    "    \n",
    "    # This section keeps picking a random prize box until it gets one that follows our rules:\n",
    "    #   It must not be the prize box and it must not be the box we chose.\n",
    "    reveal = prize\n",
    "    while reveal == prize or reveal == choice:\n",
    "        reveal = r.randint(1, 3)\n",
    "    if choice == 1 and reveal == 2: switch = 3\n",
    "    if choice == 1 and reveal == 3: switch = 2\n",
    "    if choice == 2 and reveal == 1: switch = 3\n",
    "    if choice == 2 and reveal == 3: switch = 1\n",
    "    if choice == 3 and reveal == 1: switch = 2\n",
    "    if choice == 3 and reveal == 2: switch = 1\n",
    "        \n",
    "    if switch == prize: number_of_wins += 1\n",
    "        \n",
    "print 'SWITCH to the other box strategy:'\n",
    "print 'after', number_of_games, 'games:'\n",
    "print '    the winning percentage for Switch was', float(number_of_wins)/float(number_of_games)\n",
    "# print '    (the prize locations were', prize_locations[1], prize_locations[2], prize_locations[3], ')'\n",
    "print ' '\n",
    "print ' '\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combinatorics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Graphs\n",
    "\n",
    "\n",
    "Prove that a graph with $2n$ vertices and $n^2+1$ edges must contain a triangle.\n",
    "\n",
    "\n",
    "Prove: Suppose you have a grpah with an infinite number of vertices; then there is either an infinite set \n",
    "of vertices every two of which are joined by an edge, or there is an infinte set of vertices no two of \n",
    "which are joined by an edge.\n",
    "\n",
    "\n",
    "Prove: A graph with $n>=4$ vertices and $2n-3$ edges must contain a circuit with a diagonal. \n",
    "\n",
    "\n",
    "Prove: A graph with $n>=6$ vertices and $3n-5$ edges must contain two circuits which have no vertices in common.\n",
    "\n",
    "\n",
    "Prove: Every graph with $n$ vertices and $n+4$ edges contains two circuits which have no edges in common. \n",
    "\n",
    "\n",
    "A Hamiltonian *path* passes through each vertex of a graph exactly once.\n",
    "If one can arrange to make the last vertex the same as the first the Hamiltonian path becomes a Hamiltonian *circuit*.\n",
    "A Hamiltonian *graph* is one that possesses a Hamiltonian *circuit*.\n",
    "\n",
    "\n",
    "Also in case it is not familiar: The *degree* of a vertex is simply the number of edges incident to that vertex.\n",
    "\n",
    "\n",
    "Prove Dirac's theorem on Hamiltonian circuits: A graph with $n>=3$ vertices in which each vertex\n",
    "has degree at least $n/2$ has a Hamiltonian circuit. \n",
    "\n",
    "\n",
    "Prove Ore's theorem: If $n>=3$ and, for every pair of vertices that are not joined by an edge, the sum of the degrees\n",
    "is at least $n$ then the graph is Hamiltonian. \n",
    "\n",
    "\n",
    "Prove Posa's theorem: Let G be a simple graph with $n$ vertices. If for every $k$ in $1<=k<(n-1)/2$ the number of \n",
    "vertices of degree no exceeding $k$ is less than $k4, and if for $n$ odd the number of vertices with degree \n",
    "not exceeding $(n-1)/2$ does not exceed $(n-1)/2$ then G conta\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
